# Use Node.js 20 with Alpine Linux for smaller image
FROM node:20-alpine

# Install PostgreSQL and supervisor
RUN apk update && \
    apk add --no-cache \
    postgresql \
    postgresql-contrib \
    supervisor \
    bash

# Create directories
RUN mkdir -p /var/lib/postgresql/data /var/run/postgresql /app/backend

# Set PostgreSQL user
RUN chown -R postgres:postgres /var/lib/postgresql/data /var/run/postgresql

# Initialize PostgreSQL database
USER postgres
RUN initdb -D /var/lib/postgresql/data

# Configure PostgreSQL
RUN echo "host all all 0.0.0.0/0 md5" >> /var/lib/postgresql/data/pg_hba.conf && \
    echo "listen_addresses='*'" >> /var/lib/postgresql/data/postgresql.conf

# Switch back to root
USER root

# Copy backend files
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci --only=production

COPY backend/ .
RUN npm run build

# Copy database initialization script
COPY backend/init-db.sql /docker-entrypoint-initdb.d/

# Create startup script
RUN cat > /startup.sh << 'EOF'
#!/bin/bash
set -e

# Start PostgreSQL
su postgres -c "pg_ctl start -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile"

# Wait for PostgreSQL to be ready
echo "Waiting for PostgreSQL to start..."
for i in {1..30}; do
    if su postgres -c "pg_isready"; then
        echo "PostgreSQL is ready!"
        break
    fi
    echo "Waiting... ($i/30)"
    sleep 1
done

# Create database and user if not exists
su postgres -c "psql -c \"SELECT 1 FROM pg_database WHERE datname = 'pca_hijab'\" | grep -q 1 || createdb pca_hijab"
su postgres -c "psql -c \"SELECT 1 FROM pg_user WHERE usename = 'pca_user'\" | grep -q 1 || psql -c \"CREATE USER pca_user WITH PASSWORD 'pca_password';\""
su postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE pca_hijab TO pca_user;\""

# Initialize database schema
if [ -f /docker-entrypoint-initdb.d/init-db.sql ]; then
    su postgres -c "psql -U pca_user -d pca_hijab -f /docker-entrypoint-initdb.d/init-db.sql" || echo "Schema already exists"
fi

# Set environment variables
export DATABASE_URL="postgresql://pca_user:pca_password@localhost:5432/pca_hijab"
export NODE_ENV="production"
export PORT=5001

# Start Node.js backend
cd /app/backend
exec node dist/index.js
EOF

RUN chmod +x /startup.sh

# Supervisor configuration
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root

[program:startup]
command=/startup.sh
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
EOF

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]