# syntax=docker/dockerfile:1.6

###############################################
# Backend build stage
###############################################
FROM node:20-bookworm AS backend-builder

WORKDIR /app/backend

# Install dependencies (including dev deps for TypeScript build)
COPY backend/package*.json ./
RUN npm ci

# Copy source and build the TypeScript project
COPY backend/ ./
RUN npm run build && npm prune --omit=dev

###############################################
# Final runtime image with Node.js + PostgreSQL
###############################################
FROM node:20-bookworm

ENV DEBIAN_FRONTEND=noninteractive

# Install PostgreSQL server and lightweight init system
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends postgresql postgresql-contrib dumb-init; \
    PG_MAJOR="$(ls -1 /etc/postgresql | head -n 1 || true)"; \
    if [ -n "$PG_MAJOR" ]; then pg_dropcluster --stop "$PG_MAJOR" main; fi; \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy compiled backend code and minimal runtime assets
COPY --from=backend-builder /app/backend/dist ./backend/dist
COPY --from=backend-builder /app/backend/package*.json ./backend/
COPY --from=backend-builder /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder /app/backend/src/db ./backend/sql

# Ensure writable directories for runtime artifacts
RUN mkdir -p /app/backend/uploads && \
    chown -R node:node /app/backend

# Entrypoint orchestration script
COPY scripts/docker-entrypoint.sh /usr/local/bin/backend-entrypoint.sh
RUN chmod +x /usr/local/bin/backend-entrypoint.sh

# Sensible defaults (override via `docker run -e` for production)
ENV POSTGRES_DATA_DIR=/var/lib/postgresql/data \
    POSTGRES_USER=pca_app \
    POSTGRES_PASSWORD=pca_app_password \
    POSTGRES_DB=pca_hijab \
    PORT=5001 \
    NODE_ENV=development

EXPOSE 5001 5432

ENTRYPOINT ["/usr/bin/dumb-init", "--", "/usr/local/bin/backend-entrypoint.sh"]
